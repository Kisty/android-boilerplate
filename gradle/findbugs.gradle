plugins.apply('com.github.spotbugs')

spotbugs {
    toolVersion = versions.spotbugs
}

afterEvaluate {
    def variants = []
    def extensionName = android.class.simpleName
    if (extensionName.startsWith("LibraryExtension")) {
        variants = android.libraryVariants
    } else if (extensionName.startsWith("AppExtension")) {
        variants = android.applicationVariants
    }

    variants.all { variant ->
        def variantName = variant.name
        def capitalizedVariantName = variant.name.capitalize()

        task("findbugs${capitalizedVariantName}", type: project.ext.spotBugsTaskType,
                dependsOn: "compile${capitalizedVariantName}Sources") {
            group "Verification"
            description "Run FindBugs on ${variantName} build."

            maxHeapSize '512m'
            ignoreFailures = false // Fail early.
            effort = 'default'
            reportLevel = 'high'

            reports {
                xml {
                    enabled = rootProject.hasProperty('ciBuild')
                    destination = "${buildDir}/reports/findbugs/${variantName}/findbugs.xml"
                }
                html {
                    enabled = !rootProject.hasProperty('ciBuild')
                    destination = "${buildDir}/reports/findbugs/${variantName}/findbugs.html"
                }
            }

            source = fileTree('src/main/java')
            classes = files("${project.projectDir}/build/intermediates/classes/${variantName}")
            // If somebody has an idea how to make this work with support libraries -> open a PR please.
            classpath = files()

            excludeFilter = new File("${project.rootDir}/findbugs-filter.xml")
        }

        def checkTask = tasks.findByName('check')
        if (checkTask != null) {
            checkTask.dependsOn += project.tasks.findByName("findbugs${capitalizedVariantName}")
        }
    }
}
